# For more information on configuration, see:
#   * Official English Documentation: http://nginx.org/en/docs/
#   * Official Russian Documentation: http://nginx.org/ru/docs/

#user nginx;
user root;
worker_processes auto;
pid /run/nginx.pid;

# Load dynamic modules. See /usr/share/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 1024;
}

http {
    log_format  main  '$remote_addr - $remote_user [$time_local] "HOST: $host" "REQUEST: $request" '
                      '"HTTP-STATUS: $status" "BODY-BYTES-SENT: $body_bytes_sent" "HTTP-REFERER: $http_referer" '
                      '"HTTP-USER-AGENT: $http_user_agent" "HTTP-FORWARDED-FOR: $http_x_forwarded_for"';
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 2048;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    # Load modular configuration files from the /etc/nginx/conf.d directory.
    # See http://nginx.org/en/docs/ngx_core_module.html#include
    # for more information.
    include /etc/nginx/conf.d/*.conf;

    # Expires map
    map $sent_http_content_type $expires {
	default                    off;
    	text/html                  0;
    	text/css                   0;
    	application/javascript     0;
    	~image/                    max;
    }

    # blocking bots (https://www.buildersociety.com/threads/block-unwanted-bots-on-apache-nginx-constantly-updated.1898/)
    map $http_user_agent $limit_bots {
	default 0;
     	~*(adbeat_bot|ahrefsbot|ahrefssiteaudit|alexibot|appengine|aqua_products|archive.org_bot|archive|asterias|attackbot|b2w|backdoorbot|becomebot|blackwidow|blekkobot) 1;
     	~*(blowfish|botalot|builtbottough|bullseye|bunnyslippers|ccbot|cheesebot|cherrypicker|chinaclaw|chroot|clshttp|collector) 1;
     	~*(control|copernic|copyrightcheck|copyscape|cosmos|craftbot|crescent|curl|custo|demon) 1;
     	~*(disco|dittospyder|dotbot|download|downloader|dumbot|ecatch|eirgrabber|email|emailcollector) 1;
     	~*(emailsiphon|emailwolf|enterprise_search|erocrawler|eventmachine|exabot|express|extractor|extractorpro|eyenetie) 1;
     	~*(fairad|flaming|flashget|foobot|foto|gaisbot|getright|getty|getweb!|gigabot) 1;
     	~*(github|go!zilla|go-ahead-got-it|go-http-client|grabnet|grafula|grub|hari|harvest|hatena|antenna|hloader) 1;
     	~*(hmview|htmlparser|httplib|httrack|humanlinks|ia_archiver|indy|infonavirobot|interget|intraformant) 1;
     	~*(iron33|jamesbot|jennybot|jetbot|jetcar|joc|jorgee|kenjin|keyword|larbin|leechftp) 1;
     	~*(lexibot|library|libweb|libwww|linkextractorpro|linkpadbot|linkscan|linkwalker|lnspiderguy|looksmart) 1;
     	~*(lwp-trivial|mass|mata|midown|miixpc|mister|mj12bot|moget|msiecrawler|naver) 1;
     	~*(navroad|nearsite|nerdybot|netants|netmechanic|netspider|netzip|nicerspro|ninja|nutch) 1;
     	~*(octopus|offline|openbot|openfind|openlink|pagegrabber|papa|pavuk|pcbrowser|perl) 1;
     	~*(perman|picscout|propowerbot|prowebwalker|psbot|pycurl|pyq|pyth|python) 1;
     	~*(python-urllib|queryn|quester|radiation|realdownload|reget|retriever|rma|rogerbot|scan|screaming|frog|seo) 1;
     	~*(scooter|searchengineworld|searchpreview|semrush|semrushbot|semrushbot-sa|seokicks-robot|sitesnagger|smartdownload|sootle) 1;
     	~*(spankbot|spanner|spbot|spider|stanford|stripper|sucker|superbot|superhttp|surfbot|surveybot) 1;
     	~*(suzuran|szukacz|takeout|teleport|telesoft|thenomad|tocrawl|tool|true_robot|turingos) 1;
     	~*(twengabot|typhoeus|url_spider_pro|urldispatcher|urllib|urly|vampire|vci|voideye|warning) 1;
     	~*(webauto|webbandit|webcollector|webcopier|webcopy|webcraw|webenhancer|webfetch|webgo|webleacher) 1;
     	~*(webmasterworld|webmasterworldforumbot|webpictures|webreaper|websauger|webspider|webster|webstripper|webvac|webviewer) 1;
     	~*(webwhacker|webzip|webzip|wesee|wget|widow|woobot|www-collector-e|wwwoffle|xenu) 1;
    }

    ssl_certificate     /etc/letsencrypt/live/marcuschiu.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/marcuschiu.com/privkey.pem;
    
    limit_req_zone $binary_remote_addr zone=personal:10m rate=10r/s;
    server {
	listen 443 ssl;
        server_name marcuschiu.com www.marcuschiu.com;
        expires $expires;
	root /home/ec2-user/personal-website;
        index index.html;
        limit_req zone=personal burst=20 nodelay;
        location / {
        }
    }

    server {
        listen 443 ssl;
        server_name crontab.marcuschiu.com;
        root /home/ec2-user/crontab-guru-clone;
        index index.html;
        limit_req zone=personal burst=20 nodelay;
        location / {
        }
    }

    server {
	listen 443 ssl;
        server_name inspector.marcuschiu.com;
        root /home/ec2-user/fake-personal-website;
	index index.html;
#        limit_req zone=personal burst=20 nodelay;
        location / {
        }
    }

    server {
        listen 443 ssl;
        server_name d3.marcuschiu.com;
	expires $expires;
        root /home/ec2-user/confluence-data;
        index index.html;
        limit_req zone=personal burst=20 nodelay;
        location / {
        }
    }

    limit_req_zone $binary_remote_addr zone=mylimit:10m rate=2r/s;
    server {
        listen 443 ssl;
        server_name doc.marcuschiu.com;
        root /home/ec2-user/ui-store-front-build;
        index index.html index.htm;
        limit_req zone=mylimit burst=20 nodelay;
        location / {
            # This will allow you to refresh the page in your angular app
            # Which will not give you an error 404
            try_files $uri $uri/ /index.html;
        }
    }

    limit_req_zone $binary_remote_addr zone=corelimit:10m rate=10r/s;
    server {
        listen 443 ssl;
        server_name core.marcuschiu.com;
        limit_req zone=corelimit burst=10 nodelay;
        location / {
            proxy_pass http://72.180.103.50:8080;
            proxy_set_header Host core.marcuschiu.com;
            proxy_set_header X-Forwarded-For $remote_addr; 
            limit_except GET {
                deny all;
            }
        }
    }

    limit_req_zone $binary_remote_addr zone=chatlimit:50m rate=50r/s;
    server {
        listen 443 ssl;
        server_name chat.marcuschiu.com;
        limit_req zone=chatlimit burst=50 nodelay;
        location / {
            proxy_pass http://72.180.103.50:8080;
            proxy_set_header Host chat.marcuschiu.com;
            proxy_set_header X-Forwarded-For $remote_addr;
	    # WebSockets Stuff
	    proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
	    proxy_set_header Host $host;
            #proxy_read_timeout 86400;
        }
    }

    limit_req_zone $binary_remote_addr zone=wikilimit:10m rate=10r/s;
    server {
        listen 443 ssl;
        server_name wiki.marcuschiu.com;
        limit_req zone=wikilimit burst=10 nodelay;
	location / {
            # blocking bots (https://www.buildersociety.com/threads/block-unwanted-bots-on-apache-nginx-constantly-updated.1898/)
	    if ($http_user_agent = "") { return  301 $scheme://www.google.com/; }
	    if ($limit_bots = 1) { return  301 $scheme://www.google.com/; }
	    # block all login attempts (i.e. contains url param title=Special:UserLogin
	    if ( $arg_title = "Special:UserLogin" ) { return 403; }
	    if ( $arg_title = "Special%3AUserLogin" ) { return 403; }
            proxy_pass http://72.180.103.50:8080;
            proxy_set_header Host wiki.marcuschiu.com;
            proxy_set_header X-Forwarded-For $remote_addr;
        }
    }

    limit_req_zone $binary_remote_addr zone=confluencelimit:11m rate=20r/s;
    server {
        listen 443 ssl;
        server_name confluence.marcuschiu.com;
        limit_req zone=confluencelimit burst=20 nodelay;
	# block login attempts
        location /login.action {
		return 403;	
	}
        location / {
	    # block these IPs that comment surge
	    deny 134.249.124.67;
	    deny 162.244.33.25;
	    deny 162.244.34.148;
	    deny 185.191.171.3;
	    deny 185.191.171.34;
	    deny 185.191.171.8;
	    deny 195.154.222.29;
	    deny 195.154.222.31;
	    deny 195.154.242.189;
	    deny 195.154.242.89;
	    deny 62.210.122.241;
	    deny 62.210.177.44;
	    deny 62.210.180.146;
	    deny 62.210.180.164;
	    deny 62.210.204.15;
	    deny 62.210.207.209;
	    deny 62.210.83.206;
	    # blocking bots (https://www.buildersociety.com/threads/block-unwanted-bots-on-apache-nginx-constantly-updated.1898/)
	    if ($http_user_agent = "") { return  301 $scheme://www.google.com/; }
            if ($limit_bots = 1) { return  301 $scheme://www.google.com/; }
	    proxy_pass http://72.180.103.50:8080;
            proxy_set_header Host confluence.marcuschiu.com;
            proxy_set_header X-Forwarded-For $remote_addr;
        }
    }

    limit_req_zone $binary_remote_addr zone=iftttlimit:10m rate=1r/s;
    server {
        listen 443 ssl;
	server_name ifttt.marcuschiu.com;
	limit_req zone=iftttlimit burst=1 nodelay;
	# an external request to: /secure/0f601c7db48c5d733c2d549a9f3e0e47/hello/world
	# becomes: /pass/hello/word 
        # 0f601c7db48c5d733c2d549a9f3e0e47 comes from:
        # > echo -n 'hello/worldturkeylegs' | openssl md5 -hex
	location /secure {
	       	secure_link_secret turkeylegs;
        	if ($secure_link = "") { return 403; }
       	        rewrite ^ /pass/$secure_link;
   	}
	location /pass {
		internal;
		proxy_pass http://72.180.103.50:8080;
		proxy_set_header Host ifttt.marcuschiu.com;
		proxy_set_header X-Forward-For $remote_addr;
	}
    }    

    log_format  mycustomformat  '$host $remote_addr $remote_port - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" $server_port';
    limit_req_zone $binary_remote_addr zone=utillimit:10m rate=10r/s;
    server {
        listen 443 ssl;
        server_name util.marcuschiu.com;
        limit_req zone=utillimit burst=10 nodelay;
        location / {
            proxy_pass http://72.180.103.50:8080;
            proxy_set_header Host util.marcuschiu.com;
            proxy_set_header X-Forwarded-For $remote_addr; 
	    proxy_set_header X-Forwarded-For-Port $remote_port;
        }
    }

    server {
        listen 443 ssl;
        server_name meet.marcuschiu.com;
        location / {
            proxy_pass http://72.180.103.50:8080;
            proxy_set_header Host meet.marcuschiu.com;
            proxy_set_header X-Forwarded-For $remote_addr;
            # WebSockets Stuff
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header Host $host;
        }
    }

    limit_req_zone $binary_remote_addr zone=wordpresslimit:10m rate=10r/s;
    server {
        listen 80;
        server_name thoughts.marcuschiu.com;
        # limit_req zone=wordpresslimit burst=10 nodelay;
        location /wp-admin {
		return 403;
	}
	location /wp-login.php {
		return 403;
	}
	location / {
            proxy_pass http://72.180.103.50:8080;
            proxy_set_header Host thoughts.marcuschiu.com;
            proxy_set_header X-Forwarded-For $remote_addr;
            proxy_set_header X-Forwarded-For-Port $remote_port;
        }
    }

    # all non-empty Host headers requesting at port 80 gets redirected to https  
    server {
        listen 80 default_server;
        server_name _;
        return 301 https://$host$request_uri;
    }

    # If requests have empty “Host” header field, drop connection
    server {
	listen      80;
    	server_name "";
    	return      444;
    }

# Settings for a default server
#    server {
#        listen       80 default_server;
#        listen       [::]:80 default_server;
#        server_name  _;
#        root         /usr/share/nginx/html;
#
#        # Load configuration files for the default server block.
#        include /etc/nginx/default.d/*.conf;
#
#        location / {
#        }
#
#        error_page 404 /404.html;
#        location = /40x.html {
#        }
#
#        error_page 500 502 503 504 /50x.html;
#        location = /50x.html {
#        }
#    }

# Settings for a TLS enabled server.
#
#    server {
#        listen       443 ssl http2 default_server;
#        listen       [::]:443 ssl http2 default_server;
#        server_name  _;
#        root         /usr/share/nginx/html;
#
#        ssl_certificate "/etc/pki/nginx/server.crt";
#        ssl_certificate_key "/etc/pki/nginx/private/server.key";
#        ssl_session_cache shared:SSL:1m; # 1MB ~ 4000 sessions
#        ssl_session_timeout  10m; # default is 5
#        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # deafault already
#        ssl_ciphers HIGH:!aNULL:!MD5; # default already
#        ssl_prefer_server_ciphers on;
#
#        location / {
#        }
#    }

}

